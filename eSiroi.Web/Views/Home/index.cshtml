
    @{
    Layout = "~/Views/Shared/_Layout.cshtml"; 
}
@*<script>
    var json_private_key = null;
    var string_private_key = null;

    crypto.subtle.exportKey("jwk", private_key_object).then(function(result){
    
        json_private_key = result;
        string_private_key = JSON.stringify(json_private_key);

        crypto.subtle.importKey("jwk", JSON.parse(string_private_key), {name: "RSA-OAEP", modulusLength: 2048, publicExponent: new Uint8Array([0x01, 0x00, 0x01]), hash: {name: "SHA-256"}}, true, ["decrypt"]).then(function(e){
            console.log(e);
        }, function(e){
            console.log(e);
        });

    }, function(e){
        console.log(e.message);
    });
   // Here we first converted the private key to JWK format and then to an string. You can send the string_private_key to server which is the string representation of the private key.

   // Complete Code
   // Here is complete code together for testing or to play with

    function convertStringToArrayBufferView(str)
    {
        var bytes = new Uint8Array(str.length);
        for (var iii = 0; iii < str.length; iii++) 
    {
            bytes[iii] = str.charCodeAt(iii);
    }

        return bytes;
    }   

    function convertArrayBufferViewtoString(buffer)
    {
        var str = "";
        for (var iii = 0; iii < buffer.byteLength; iii++) 
    {
            str += String.fromCharCode(buffer[iii]);
    }

        return str;
    }

        var private_key_object = null; 
    var public_key_object = null; 

    var promise_key = null;

    var encrypted_data = null;
    var encrypt_promise = null;

    var data = "QNimate";

    var decrypt_promise = null;
    var decrypted_data = null;

    var vector = crypto.getRandomValues(new Uint8Array(16));

    var crypto = window.crypto || window.msCrypto;

    if(crypto.subtle)
    {
        alert("Cryptography API Supported");

        promise_key = crypto.subtle.generateKey({name: "RSA-OAEP", modulusLength: 2048, publicExponent: new Uint8Array([0x01, 0x00, 0x01]), hash: {name: "SHA-256"}}, false, ["encrypt", "decrypt"]);

        promise_key.then(function(key){
            private_key_object = key.privateKey;
            public_key_object = key.publicKey;

            encrypt_data();
        });

        promise_key.catch = function(e){
            console.log(e.message);
        }
    
    }
    else
    {
        alert("Cryptography API not Supported");
    }

    function encrypt_data()
    {
        encrypt_promise = crypto.subtle.encrypt({name: "RSA-OAEP", iv: vector}, public_key_object, convertStringToArrayBufferView(data));

        encrypt_promise.then(
            function(result){
                encrypted_data = new Uint8Array(result);


                decrypt_data();
            }, 
            function(e){
                console.log(e.message);
            }
        );
    }

    function decrypt_data()
    {
        decrypt_promise = crypto.subtle.decrypt({name: "RSA-OAEP", iv: vector}, private_key_object, encrypted_data);

        decrypt_promise.then(
            function(result){
                decrypted_data = new Uint8Array(result);
                console.log(convertArrayBufferViewtoString(decrypted_data));
            },
            function(e){
                console.log(e.message);
            }
        );
    }
</script>*@
   <div class="error-msgs">
    <!-- Show error messages (typically a reusable directive) -->
    <div class="alert alert-danger alert-dismissable" ng-repeat="msg in errorHandler.errors track by $index" >
        <button type="button" class="close" ng-click="errorHandler.errors.splice($index, 1)">&times;</button>
        {{msg}}
    </div>
    <button type="button" class="btn btn-sm btn-default" ng-click="errorHandler.errors.length = 0;" ng-show="errorHandler.errors.length">Clear all messages</button>
</div>

<div class="container">
      <noscript>
        
            <h1>Sorry JavaScript is disabled in Your browser and the site will not function properly so please enable javascript and try again </h1>
                </noscript>
    <div class="row">

        <div ui-view >
        </div>
        <div class="push"></div>
    </div>
    <footer class="text-center hidden-print">
        <p>Designed and Developed by NIC</p>
         <span class="label label-info">Total Number of visitors: @ApplicationInstance.Application["Totaluser"]</span>
      </footer>
   

</div><!-- container -->



